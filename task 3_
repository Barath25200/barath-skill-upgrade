const mongoose = require('mongoose');

const postSchema = new mongoose.Schema({
  title: String,
  content: String
});

const Post = mongoose.model('Post', postSchema);

module.exports = Post;

// auth.js
const jwt = require('jsonwebtoken');

const authenticate = (req, res, next) => {
  const token = req.header('x-auth-token');
  if (!token) return res.status(401).json({ msg: 'No token provided' });
  jwt.verify(token, process.env.SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ msg: 'Invalid token' });
    req.user = decoded;
    next();
  });
};

module.exports = authenticate;

// routes.js
const express = require('express');
const router = express.Router();
const Post = require('./model');
const authenticate = require('./auth');

router.post('/posts', authenticate, (req, res) => {
  const post = new Post(req.body);
  post.save((err, post) => {
    if (err) return res.status(500).json({ msg: 'Error creating post' });
    res.json(post);
  });
});

router.get('/posts', authenticate, (req, res) => {
  Post.find()
    .then(posts => res.json(posts))
    .catch(err => res.status(500).json({ msg: 'Error fetching posts' }));
});

router.get('/posts/:id', authenticate, (req, res) => {
  Post.findById((link unavailable))
    .then(post => res.json(post))
    .catch(err => res.status(404).json({ msg: 'Post not found' }));
});

router.put('/posts/:id', authenticate, (req, res) => {
  Post.findByIdAndUpdate((link unavailable), req.body, { new: true }, (err, post) => {
    if (err) return res.status(500).json({ msg: 'Error updating post' });
    res.json(post);
  });
});

router.delete('/posts/:id', authenticate, (req, res) => {
  Post.findByIdAndRemove((link unavailable), (err, post) => {
    if (err) return res.status(404).json({ msg: 'Post not found' });
    res.json({ msg: 'Post deleted successfully' });
  });
});

module.exports = router;

// app.js
const express = require('express');
const app = express();
const router = require('./routes');

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use('/api', router);

app.listen(3000, () => {
  console.log('Server started on port 3000');
});